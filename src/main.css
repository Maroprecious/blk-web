@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 53 14% 89%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 33 42% 41%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 0 0% 83%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --gray-900: #101828;
    --gray-700: #344054;
    --gray-500: #667085;
    --gray-400: #98a2b3;
    --gray-200: #eaecf0;
    --gray-50: #f9fafb;

    --sage-300: #e6e5de;
    --sage-200: #e9d7c7;

    --cream-300: #faf6f3;

    --clay-900: #cf956f;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@font-face {
  font-family: "AmsterdamOne";
  src: url("./assets/fonts/AmsterdamOne.ttf");
}

@font-face {
  font-family: "Arapey";
  src: url("./assets/fonts/Arapey.ttf");
}

.font-amsterdam {
  font-family: "AmsterdamOne";
}

.font-arapey {
  font-family: "Arapey";
}

html,
body {
  font-family: "Arapey";
}

.sideNav:hover {
  background: #ca8b61;
  border-left: 2px solid white;
  color: white;
}
.popup-boxShadow {
  box-shadow: 0px 8px 8px -4px rgba(16, 24, 40, 0.03),
    0px 20px 24px -4px rgba(16, 24, 40, 0.08);
}
.custom-shadow {
  box-shadow: 0px -12px 76px 0px rgba(208, 216, 229, 0.33);
}
.custom-calendar .rbc-month-view .rbc-row-bg {
  height: 150px;
}
.custom-calendar .rbc-month-view .rbc-row-content {
  text-align: center; /* Center-align the entire cell content */
  margin-top: 20px;
}
@font-face {
  font-family: "Arapey";
  src: local("Arapey"),
    url("./assets/fonts/Arapey/Arapey-Regular.woff") format("woff"),
    url("./assets/fonts/Arapey/Arapey-Regular.woff2") format("woff2");
  font-weight: 400;
}
@font-face {
  font-family: "Arapey-italic";
  src: local("Arapey"),
    url("./assets/fonts/Arapey/Arapey-Italic.woff") format("woff"),
    url("./assets/fonts/Arapey/Arapey-Italic.woff2") format("woff2");
  font-weight: 400;
}
@font-face {
  font-family: "Amsterdam";
  src: local("Amsterdam"),
    url("./assets/fonts/Amsterdam/AmsterdamOne-eZ12l.woff") format("woff"),
    url("./assets/fonts/Amsterdam//AmsterdamOne-eZ12l.woff2") format("woff2");
  font-weight: 300;
}

.font-maison {
  font-family: "Maison Neue", sans-serif;
  font-size: 26px;
  font-weight: 300;
}

.custom-calendar .rbc-month-view .rbc-date-cell {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  height: 100%; /* Ensure the cell takes the full height */
}
.custom-calendar .rbc-month-view .rbc-header {
  color: #667085;
  font-family: "Maison Neue", sans-serif;
  font-size: 20px;
  display: block;
  font-weight: 300;
}
.custom-calendar .rbc-month-view .rbc-row:nth-child(3) .rbc-row-segment {
  border: none; /* Remove the top border for the second row */
}
.custom-calendar .rbc-event {
  background-color: white; /* Change the background color to white */
  border-left: 4px solid #959c7e; /* Optional: Set border color for the event */
  color: #344054; /* Optional: Set text color for the event */
  font-size: 20px;
  height: 47px;
  padding-top: 8px;
}

.custom-calendar .rbc-today {
  background-color: transparent;
  border: none;
  color: inherit;
  font-weight: 400;
}
.custom-list {
  list-style-type: disc; /* You can use 'circle' or 'square' as well */
}
.video-wrapper {
  position: relative;
}

.video {
  width: 100%;
  height: auto;
}

.video:before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to bottom,
    rgba(255, 1, 1, 0.4),
    rgba(0, 0, 0, 0.5)
  ); /* Adjust opacity as needed */
  pointer-events: none; /* Ensure clicks pass through the overlay */
}
.mantine-PasswordInput-innerInput {
  background: transparent;
  width: 100%;
  height: 50px;
}
/* .rbc-time-slot {
  background-color: red;
}
.rbc-month-view {
  background-color: red;
} */
/* .rbc-day-bg {
  background-color: #e6e5de;
  border: 1px solid #959c7e;
} */
/* .rbc-off-range-bg {
  background-color: #e6e5de;
  border: 1px solid #959c7e;
}
.other-cell {
  background-color: #e6e5de;
  border: 1px solid #959c7e;
} */
/* .rbc-month-row {
  background-color: #e6e5de;
  border: 1px solid #959c7e;
} */
/* .today-cell {
  background-color: #e6e5de;
  border: 1px solid #959c7e;
} */
.font-arapey {
  font-family: "Arapey", sans-serif;
}
.font-amsterdam {
  font-family: "Amsterdam", sans-serif;
}
.spinner {
  animation-name: spinner_loader;
  animation-duration: 1s;
  animation-timing-function: ease;
  animation-iteration-count: infinite;
  color: #fff !important;
}

@keyframes spinner_loader {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";
import { PrimaryAccordion } from "./primaryAccordion";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

<<<<<<< HEAD
const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-6 transition-all [&[data-state=open]>svg]:rotate-180",
=======
export const AccordionItem = forwardRef(
  (
    { children, className, ...props }: AccordionProps,
    forwardedRef: Ref<HTMLDivElement> | undefined
  ) => (
    <Accordion.Item
      className={classNames("border-b border-b-gray-200", className)}
      {...props}
      ref={forwardedRef}
    >
      {children}
    </Accordion.Item>
  )
);

export const AccordionTrigger = forwardRef(
  (
    { children, className, ...props }: AccordionProps,
    forwardedRef: Ref<HTMLButtonElement> | undefined
  ) => (
    <Accordion.Header className="flex">
      <Accordion.Trigger
        className={classNames(
          "text-gray-900 text-[16px] cursor-pointer capitalize font-arapey group flex h-[45px] flex-1 cursor-default items-center justify-between bg-transparent leading-none border-b border-b-gray-200",
          className
        )}
        {...props}
        ref={forwardedRef}
      >
        {children}

        <FaAngleDown
          className="text-[#667085] ease-[cubic-bezier(0.87,_0,_0.13,_1)] transition-transform duration-300 group-data-[state=open]:rotate-180"
          aria-hidden
        />
      </Accordion.Trigger>
    </Accordion.Header>
  )
);

export const AccordionContent = forwardRef(
  (
    { children, className, ...props }: AccordionProps,
    forwardedRef: Ref<HTMLDivElement> | undefined
  ) => (
    <Accordion.Content
      className={classNames(
        "text-gray-500 font-arapey bg-transparent data-[state=open]:animate-slideDown data-[state=closed]:animate-slideUp overflow-hidden text-[13px]",
>>>>>>> dbc3534e91dd575e9841f8394a336cdad1521647
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
  PrimaryAccordion,
}; */
